##
##    Project: SDDC.Lab
##    Authors: Luis Chanu & Rutger Blom
##   Filename: playbooks/deployRouter.yml
##
---
- hosts: localhost
  name: deployRouter.yml
  tasks:
    - name: deployRouter_Playbook
      ansible.builtin.debug:
        msg: "Starting playbook: {{ ansible_play_name }}"

    - name: Display error message if Pod-XXX-Config file is not valid or provided
      ansible.builtin.pause:
        seconds: 5
        prompt: |
          *****************************************************************************************************
          ****************************************** ERROR MESSAGE ********************************************
          *****************************************************************************************************

            A valid "Pod-XXX-Config.yml" file is required in order for this playbook to run.

            Please verify:
            ==============
              1) You supplied a valid Pod-XXX-Config.yml file via the ansible-playbook -e "@Pod-XXX-Config.yml"
                 command-line option.  Here is an example of a how to load a Pod-XXX-Config.yml file that is
                 located in your home directory:
                                    ansible-playbook -e "@~/Pod-XXX-Config.yml" deploy.yml

              2) The Pod-XXX-Config.yml file provided was created using the playbooks/createPodConfig.yml script.
                 All Pod configuration files used to deploy labs MUST be generated using that script.

              3) You included the proper path with the "-e" option to the Pod-XXX-Config.yml file.

              4) You prefaced the file name in the "-e" option with a '@', as shown in the example above.

          *****************************************************************************************************
      when:
        - Valid_Pod_Config_File is not defined

    - name: Exit Ansible playbook if Pod-XXX-Config.yml file is not valid or provided
      ansible.builtin.meta: end_play
      when: Valid_Pod_Config_File is not defined


    - name: DEBUG -- Display Target Variables (Pause)
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          ================================ Display Variables For Pod {{ '%03d'|format(Pod.Number|int) }} ==================================


                                     Ansible Playbook: {{ ansible_play_name }}

                                    Target.Deployment: {{ Target.Deployment }}

                                          Target.FQDN: {{ Target.FQDN }}
                                          Target.User: {{ Target.User }}
                                      Target.Password: {{ Target.Password }}
                                       Target.vSwitch: {{ Target.vSwitch }}
                                       Target.Cluster: {{ Target.Cluster }}
                                    Target.DataCenter: {{ Target.DataCenter }}
                                     Target.Datastore: {{ Target.Datastore }}
                                      Target.VMFolder: {{ Target.VMFolder }}
                                     Target.ISOFolder: {{ Target.ISOFolder }}
                                    Target.TempFolder: {{ Target.TempFolder }}

                          Target.PortGroup.Trunk.Name: {{ Target.PortGroup.Trunk.Name }}
                          Target.PortGroup.Trunk.VLAN: {{ Target.PortGroup.Trunk.VLAN }}
                    Target.PortGroup.Management.Name : {{ Target.PortGroup.Management.Name }}
                    Target.PortGroup.Management.VLAN : {{ Target.PortGroup.Management.VLAN }}

                       Deploy.Software.Router.Version: {{ Deploy.Software.Router.Version }}

            Deploy.Software.Options.UseLocalInstaller: {{ Deploy.Software.Options.UseLocalInstaller }}
            Deploy.Software.Options.KeepNewInstallers: {{ Deploy.Software.Options.KeepNewInstallers }}

          =================================================================================================
      when:
        - DEBUG.DisplayVariables == true

    - name: Check if the VyOS router is already deployed
      community.vmware.vmware_guest_info:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        datacenter: "{{ Target.DataCenter }}"
        folder: "{{ Target.VMFolder }}"
        name: "{{ Nested_Router.Name }}"
        schema: "vsphere"
        properties: ["overallStatus"]
      delegate_to: localhost
      register: status
      ignore_errors: true
      no_log: true
      when: 
        - Deploy.Product.Router == true

    - name: Create temp directory
      ansible.builtin.file:
        path: "{{ Target.TempFolder }}"
        state: directory
      when: 
        - Deploy.Product.Router == true
        - status is failed

    - name: Check if VyOS installation file exists locally in the software repository (Legacy and Latest)
      ansible.builtin.stat:
        path: "{{ Deploy.Software.Router.Directory }}/{{ Deploy.Software.Router.File }}"
      register: InstallerFileCheck

    - name: Create temp directory for installation file
      ansible.builtin.file:
        path: "{{ Target.TempFolder }}"
        state: directory

    - name: Copy VyOS installation file to temp folder if it already exists locally rather than downloading (overwrite if exists)
      ansible.builtin.copy:
        src:  "{{ Deploy.Software.Router.Directory }}/{{ Deploy.Software.Router.File }}"
        dest: "{{ Target.TempFolder }}/{{ Deploy.Software.Router.Installer }}"
        mode: "666"
        force: yes
      when:
        - InstallerFileCheck.stat.exists == true
        - Deploy.Software.Options.UseLocalInstaller == true
        - Deploy.Product.Router == true
        - status is failed

    - name: Download VyOS installation media (overwrite if exists)
      ansible.builtin.get_url:
        url:  "{{ Deploy.Software.Router.URL }}/{{ Deploy.Software.Router.File }}"
        dest: "{{ Target.TempFolder }}/{{ Deploy.Software.Router.Installer }}"
        force: yes
      when: 
        - (InstallerFileCheck.stat.exists != true) or (Deploy.Software.Options.UseLocalInstaller != true)
        - Deploy.Product.Router == true
        - status is failed

    - name: Update VyOS installation file in the local software repository (overwrite if exists)
      ansible.builtin.copy:
        src:  "{{ Target.TempFolder }}/{{ Deploy.Software.Router.Installer }}"
        dest: "{{ Deploy.Software.Router.Directory }}/{{ Deploy.Software.Router.File }}"
        force: yes
      when:
        - InstallerFileCheck.stat.exists != true
        - Deploy.Software.Options.KeepNewInstallers == true
        - Deploy.Product.Router == true
        - status is failed

    - name: Create configuration file for VyOS router
      ansible.builtin.template: 
        src:  "{{ Target.TemplateFolder }}/{{ Deploy.Software.Router.Template }}"
        dest: "{{ Target.TempFolder }}/{{ Deploy.Software.Router.Config }}"
        mode: "666"
      when: 
        - Deploy.Product.Router == true
        - status is failed


##
## The below tasks are for the deploying the VyOS **LEGACY**  release
##

    - name: Deploy VyOS router (Legacy)
      community.vmware.vmware_deploy_ovf:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        allow_duplicates: no
        cluster: "{{ Target.Cluster }}"
        datacenter: "{{ Target.DataCenter }}"
        folder: "{% if Target.Deployment == 'vCenter' %}/{{ Target.DataCenter }}/vm/{{ Target.VMFolder }}{% else %}{{ Target.VMFolder }}{% endif %}"         # For vCenter deployment, VM Folder path must be the FULL path: /<DataCenter>/vm/<ParentFolder>/<ChildFolder>
        datastore: "{{ Target.Datastore }}"
        name: "{{ Nested_Router.Name }}"
        ovf: "{{ Target.TempFolder }}/{{ Deploy.Software.Router.Installer }}"
        networks:
          "public": "{{ Nested_Router.Interface.Uplink.PortGroup }}"
          "internal": "{{ Target.PortGroup.Trunk.Name }}"
        disk_provisioning: "{{ Common.DiskProvisioning }}"
        power_on: true
        wait: true
        wait_for_ip_address: yes
      delegate_to: localhost
      when: 
        - Deploy.Product.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Legacy"

    - name: Configure VyOS router (Legacy)
      community.vmware.vmware_guest_file_operation:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        vm_id: "{{ Nested_Router.Name }}"
        vm_username: "vyos"
        vm_password: "vyos"
        copy:
            src: "{{ Target.TempFolder }}/{{ Deploy.Software.Router.Config }}"
            dest: "/config/config.boot"
            overwrite: true
      when: 
        - Deploy.Product.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Legacy"

    - name: Reboot VyOS VM (Legacy)
      community.vmware.vmware_guest_powerstate:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        name: "{{ Nested_Router.Name }}"
        state: reboot-guest
      when: 
        - Deploy.Product.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Legacy"


##
## The Below tasks are for the deploying the VyOS rolling ('**Latest**') release
##

    - name: Upload the VyOS ISO to the datastore (Latest)
      community.vmware.vsphere_copy: 
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        datacenter: "{{ Target.DataCenter }}"
        datastore: "{{ Target.Datastore }}" 
        src: "{{ Target.TempFolder }}/{{ Deploy.Software.Router.Installer }}"
        path: "{{ Target.ISOFolder }}/{{ Deploy.Software.Router.Installer }}"
      tags: upload
      when: 
        - Deploy.Product.Router  == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"

    - name: Create VyOS router VM on vCenter (Latest)
      community.vmware.vmware_guest:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        name: "{{ Nested_Router.Name }}"
        state: poweredon
        guest_id: debian10_64Guest
        cluster: "{{ Target.Cluster }}"
        datacenter: "{{ Target.DataCenter }}"
        folder: "{{ Target.VMFolder }}"
        disk:
        - size_gb: "10"
          type: "{{ Common.DiskProvisioning }}"
          datastore: "{{ Target.Datastore }}"
        hardware:
          memory_mb: "512"
          num_cpus: "1"
          num_cpu_cores_per_socket: "1"
          scsi: paravirtual
        networks:
          - name: "{{ Nested_Router.Interface.Uplink.PortGroup }}"
            device_type: vmxnet3
          - name: "{{ Target.PortGroup.Trunk.Name }}"
            device_type: vmxnet3
        cdrom:
          type: "iso"
          iso_path: "[{{ Target.Datastore }}] {{ Target.ISOFolder }}/{{ Deploy.Software.Router.Installer }}"
        annotation: | 
                    {{ Common.Annotation }}
                    Username: vyos
                    Password: {{ Common.Password.Nested }}
      when: 
        - Deploy.Product.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"

    - name: Wait 1 minute for the VyOS router to boot
      ansible.builtin.pause:
        minutes: 1
      when: 
        - Deploy.Product.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"

    - name: Walk through the setup dialog 1 (Enter 'vyos' username)
      community.vmware.vmware_guest_sendkey:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        name: "{{ Nested_Router.Name }}"
        string_send: "vyos"
      when: 
        - Deploy.Product.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"

    - name: Wait 5 seconds
      ansible.builtin.pause:
        seconds: 5
      when: 
        - Deploy.Product.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"

    - name: Walk through the setup dialog 2 (Press 'ENTER' after username)
      community.vmware.vmware_guest_sendkey:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        name: "{{ Nested_Router.Name }}"
        keys_send:
          - ENTER
      when: 
        - Deploy.Product.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"

    - name: Wait 5 seconds
      ansible.builtin.pause:
        seconds: 5
      when: 
        - Deploy.Product.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"

    - name: Walk through the setup dialog 3 (Send 'vyos' password)
      community.vmware.vmware_guest_sendkey:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        name: "{{ Nested_Router.Name }}"
        string_send: "vyos"
      when: 
        - Deploy.Product.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"

    - name: Wait 5 seconds
      ansible.builtin.pause:
        seconds: 5
      when: 
        - Deploy.Product.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"

    - name: Walk through the setup dialog 4
      community.vmware.vmware_guest_sendkey:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        name: "{{ Nested_Router.Name }}"
        keys_send:
          - ENTER
          - ENTER
        string_send: "install image"
      when: 
        - Deploy.Product.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"

    - name: Wait 5 seconds
      ansible.builtin.pause:
        seconds: 5
      when: 
        - Deploy.Product.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"

    - name: Walk through the setup dialog 5 (Destroy data on /dev/sda)
      community.vmware.vmware_guest_sendkey:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        name: "{{ Nested_Router.Name }}"
        keys_send:
          - ENTER
          - ENTER
          - ENTER
          - ENTER
        string_send: "yes"
      when: 
        - Deploy.Product.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"

    - name: Wait 5 seconds
      ansible.builtin.pause:
        seconds: 5
      when: 
        - Deploy.Product.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"

    - name: Walk through the setup dialog 6 (Create root partition and confirm with 'vyos' password)
      community.vmware.vmware_guest_sendkey:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        name: "{{ Nested_Router.Name }}"
        keys_send:
          - ENTER
          - ENTER
          - ENTER
          - ENTER
        string_send: "vyos"
      when: 
        - Deploy.Product.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"

    - name: Wait 5 seconds
      ansible.builtin.pause: 
        seconds: 5
      when: 
        - Deploy.Product.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"

    - name: Walk through the setup dialog 7 (Re-enter 'vyos' password to confirm)
      community.vmware.vmware_guest_sendkey:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        name: "{{ Nested_Router.Name }}"
        keys_send:
          - ENTER
        string_send: "vyos"
      when: 
        - Deploy.Product.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"

    - name: Wait 5 seconds
      ansible.builtin.pause: 
        seconds: 5
      when: 
        - Deploy.Product.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"

    - name: Walk through the setup dialog 8 (Configure GRUB on boot partition)
      community.vmware.vmware_guest_sendkey:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        name: "{{ Nested_Router.Name }}"
        keys_send:
          - ENTER
          - ENTER
      when: 
        - Deploy.Product.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"

    - name: Wait 30 seconds before rebooting the VyOS router
      ansible.builtin.pause: 
        seconds: 30
      when: 
        - Deploy.Product.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"

    - name: Reboot VyOS VM
      community.vmware.vmware_guest_powerstate:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        name: "{{ Nested_Router.Name }}"
        state: reboot-guest
      when: 
        - Deploy.Product.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"

    - name: Wait 1 minute for the VyOS router to boot
      ansible.builtin.pause: 
        minutes: 1
      when: 
        - Deploy.Product.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"

    - name: Copy configuration to VyOS router (Latest)
      community.vmware.vmware_guest_file_operation:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        vm_id: "{{ Nested_Router.Name }}"
        vm_username: "vyos"
        vm_password: "vyos"
        copy:
            src: "{{ Target.TempFolder }}/{{ Deploy.Software.Router.Config }}"
            dest: "/config/config.boot"
            overwrite: true
      when: 
        - Deploy.Product.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"

    - name: Shutdown VyOS VM
      community.vmware.vmware_guest_powerstate:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        name: "{{ Nested_Router.Name }}"
        state: shutdown-guest
      when: 
        - Deploy.Product.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"

    - name: Wait 10 seconds for the VyOS VM to shut down.
      ansible.builtin.pause: 
        seconds: 10
      when: 
        - Deploy.Product.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"

    - name: Disconnect CDROM on VyOS router VM
      community.vmware.vmware_guest:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        name: "{{ Nested_Router.Name }}"
        cdrom:
          type: "none"
      when: 
        - Deploy.Product.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"

    - name: Start the VyOS VM
      community.vmware.vmware_guest_powerstate:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        name: "{{ Nested_Router.Name }}"
        state: powered-on
      when: 
        - Deploy.Product.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"

    - name: Delete VyOS installer from vSphere datastore
      community.vmware.vsphere_file:
        host:     "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        datastore: "{{ Target.Datastore }}"
        datacenter: "{{ Target.DataCenter }}"
        path: "{{ Target.ISOFolder }}/{{ Deploy.Software.Router.Installer }}"
        state: absent
      tags: upload
      when:
        - Deploy.Product.Router  == true
        - status is failed
        - Deploy.Software.Router.Version == "Latest"
        - DEBUG.KeepInstallerFiles != true


##
## Below tasks are for both the VyOS legacy and rolling release
##

    - name: Delete the temporary template file for VyOS router
      ansible.builtin.file: 
        path: "{{ Target.TempFolder }}/{{ Deploy.Software.Router.Config }}"
        state: absent
      when: 
        - Deploy.Product.Router == true
        - status is failed
        - DEBUG.KeepConfigFiles != true

    - name: Delete the temporary installer file for VyOS router
      ansible.builtin.file: 
        path: "{{ Target.TempFolder }}/{{ Deploy.Software.Router.Installer }}"
        state: absent
      when: 
        - Deploy.Product.Router == true
        - status is failed
        - DEBUG.KeepInstallerFiles != true

    - name: Write annotation on the VyOS VM
      community.vmware.vmware_guest:
        hostname: "{{ Target.FQDN }}"
        username: "{{ Target.User }}"
        password: "{{ Target.Password }}"
        validate_certs: no
        cluster: "{{ Target.Cluster }}"
        datacenter: "{{ Target.DataCenter }}"
        folder: "{{ Target.VMFolder }}"
        name: "{{ Nested_Router.Name }}"
        annotation: | 
                    {{ Common.Annotation }}
                    { Deploy.Software.Router.Vendor }} {{ Deploy.Software.Router.Product }} { Deploy.Software.Router.Version }}
                    Username: vyos
                    Password: {{ Common.Password.Nested }}
      when: 
        - Deploy.Product.Router == true
        - status is failed
        - Deploy.Software.Router.Version == "Legacy"

    - name: Add static route on the Ansible control node
      ansible.builtin.command: ./ip route add "{{ Net.Management.IPv4.Network }}.0/{{ Net.Management.IPv4.Prefix }}" via "{{ Nested_Router.Interface.Uplink.IPv4.Address }}"
      args:
        chdir: /bin/
      register: iproute
      ignore_errors: true
      when: 
        - Deploy.Product.Router == true
        - Nested_Router.Protocol == "Static"
        - status is failed

    - name: Wait 10 seconds
      ansible.builtin.pause: seconds=10
      when: 
        - Deploy.Product.Router == true
        - status is failed
